1. 제수(나누는 수)가 0이 되었을 때 예외 처리하는 소스를 만드시오.
2. (getMessage	)는 예외상황을 알리기 위해서 정의된(또는 앞으로 여러분이 정의할), 모든 예외 클래스들이 상속하는 (Throwable	) 클래스에 정의되어 있는 메소드이다.
모든 예외 클래스들이 (Throwable	) 클래스를 상속.
3. 예외 상황을 알리는 클래스
* 배열의 접근에 잘못된 인덱스 값을 사용하는 예외상황 - ArrayIndexOutOfBoundsException
* 허용할 수 없는 형변환 연산을 진행하는 예외상황 - ClassCastException
* 배열선언 과정에서 배열의 크기를 음수로 지정하는 예외상황 - NegativeArraySizeException
* 참조변수가 null로 초기화 된 상황에서 메소드를 호출하는 예외상황 - NullPointerException
4. 3번에 있는 예외상황을 알리는 클래스를 이용하여 소스코드를 작성해 보시오.
class RuntimeExceptionCase
{	
	public static void main(String[] args)
	{
		try
		{
			int[] arr=new int[3];
			arr[-1]=20;
		}
		catch(ArrayIndexOutOfBoundsException e)
		{
			System.out.println(e.getMessage());
		}
		
		try
		{
			Object obj=new int[10];
			String str=(String)obj;
		}
		catch(ClassCastException e)
		{
			System.out.println(e.getMessage());
		}
		
		try
		{
			int[] arr=new int[-10];
		}
		catch(NegativeArraySizeException e)
		{
			System.out.println(e.getMessage());
		}
		
		try
		{
			String str=null;
			int len=str.length();
		}
		catch(NullPointerException e)
		{
			System.out.println(e.getMessage());
		}
	}
}
5. 문제5 폴더에 있는 소스코드는 if문을 이용한 예외처리 부분이 코드의 중간중간에 삽입되어 있다. 따라서 코드를 분석하는데 있어서 불편함이 따를 수 있다. 그러나 try~catch문을 활용하면 예외처리를 위한 코드를 완전히 별도로 묶을 수 있다. 하나의 try 영역에 둘 이상의 catch 영역을 구성할 수 있기 때문이다.문제에 있는 소스코드를 try~catch문으로 변경해 보자.

6. 다음은 컴파일에러가 발생하는 소스코드이다. 무엇이 문제인가?

try
{
	...
}
catch(Throwable e)
{
	...
}
catch(ArithmeticException e)
{
	...
}

자바에서는 예외 처리 블록의 순서가 중요하며, 더 구체적인 예외 클래스부터 처리해야 합니다.
여기서는 catch(Throwable e)가 먼저 나오고, 그 다음에 
catch(ArithmeticException e)가 나오고 있습니다. 
그러나 Throwable은 모든 예외 클래스의 최상위 클래스이므로, 
이 블록이 실행되면 이후의 catch(ArithmeticException e)는 실행될 수 없습니다. 
컴파일러는 이런 상황을 감지하고 컴파일 에러를 발생시킵니다.
올바른 예외 처리 순서는 가장 구체적인 예외부터 가장 일반적인 예외 순서로 되어야 합니다. 
따라서 catch(ArithmeticException e)를 먼저 나오도록 코드를 수정해야 합니다.
try
{
	...
}
catch(ArithmeticException e)
{
	...
}
catch(Throwable e)
{
	...
}


7. 예외 상황의 발생여부와 상관없이 항상 실행되는 영역에 쓰는 키워드는 무엇이고, 그것을 이용하여 소스코드를 작성해 보시오.

8. 나이를 입력 받았을 때 0보다 작은 값이 입력되면은 "유효하지 않은 나이가 입력되었습니다."라고 출력하도록 예외처리를 만드시오.

9. (throw	)는 예외상황이 발생되었음을 자바 가상머신에게 알리는 키워드이다. 따라서 이 문장이 실행되면서 자바의 예외처리 매커니즘이 동작하게 된다.

10. 문제8번을 메소드를 쓰지않고서 메인메소드내에서 처리해 보자.
11. 문제8번을 main메소드내에서도 예외상황을 처리하지 않는다면 어떻게 해야 되는가?
12. 가상머신의 예외처리 방식
* 가상머신의 예외처리1	getMessage 메소드를 호출한다.
* 가상머신의 예외처리2	예외상황이 발생해서 전달되는 과정을 출력해준다.
* 가상머신의 예외처리3	프로그램을 종료한다.
13. 예외가 발생해서 전달되는 과정이 출력되는 메소드.
(Throwable	) 클래스에 정의되어 있는 (printStackTrace	) 메소드가 이러한 유형의 메시지를 출력

14. 이름과 나이를 입력받아 저장할려고 한다.
이름은 두글자 이상을 입력받아야한다.(예외클래스에는 잘못된 이름을 저장할 수 있는 인스턴스 변수와 그 잘못된 이름을 출력하는 메소드를 만들자.)
나이는 음수값이 입력되면 안된다.
그리고 13번에 있는 메소드를 이용하여 예외상황이 전달되는 과정을 출력하도록 하자.

15. Throwable을 상속하는 예외 클래스는 (Exception	)과 (Error		) 두 가지이다. 그런데 (Error		)는 그 이름이 의미하듯이 단순히 예외라고 하기에는 심각한 오류의 상황을 표현하기 위해 정의된 클래스이다. 따라서 이 클래스를 상속하여 정의된 클래스는(이는 프로그래머가 정의하는 클래스가 아니다.) 프로그램의 실행을 멈춰야 할 정도의 매우 심각한 오류상황을 표현하는데 사용이 된다. (	Error	)를 상속하는 대표적인 클래스의 이름은 (VirtualMachineError		) 이다.
API 문서에서는 이 클래스에 대해서 다음과 같이 설명한다.
"자바 가상머신에 문제가 생겨서 더 이상 제대로 동작할 수 없는 상황을 알리기 위해서 정의된 클래스입니다."
(	Error	)를 상속하는 클래스의 오류상황이 발생하면, 그냥 프로그램이 종료되도록 놔두는 것이 상책이다(프로그램이 종료된 뒤  소스코드를 수정하는 등의 방식으로 원인을 해결해야 한다.)

(VirtualMachineError		)의 하위 클래스
(Error		)를 상속하는 대표적인 클래스가 (VirtualMachineError		)이다. 그리고 이를 상속하는 클래스 중에서 (OutOfMemoryError		)라는 클래스가 있는데, 이는 메모리 공간이 부족한 상황을 표현하는 예외 클래스이다. 따라서 이러한 오류가 발생하면, 메모리가 효율적으로(또는 적절히) 사용되도록 소스코드 자체를 변경해야 한다. 이렇듯 Error와 관련 있는 오류상황은 소스코드의 변경을 통해서 해결해야 하는 경우가 대부분이다.

16. Exception을 상속하는 대표적인 클래스 두가지
RuntimeException, IOException
17. Exception을 상속하는 클래스의 예외 상황이 임의의 메소드 내에서 발생 가능하다면, 해당 메소드는 반드시 다음 두 가지 중 한가지 방법을 선택해서 정의되어야 한다.

* try~catch문을 이용해서 메소드 내에서 예외를 처리하도록 정의한다.
* throws를 이용해서 메소드를 호출한 영역으로 예외가 전달되도록 정의한다.
18. 

clone(Object 클래스의 인스턴스 메소드)
protected Object clone()
	throws CloneNotSupportedException

Creates and returns a copy of this object.
The precise meaning of "copy" may depend on the class of the object.

위의 메소드를 호출할 때
다음과 같이 호출하면 문제가 발생한다. 무엇이 문제인가?

public void simpleMethod(int n)
{
	MyClass my = new MyClass();
	my.clone();
	...
}

답
다음과 같이 try~catch를 삽입하거나
public void simpleMethod(int n)
{
	MyClass my = new MyClass();
	try
	{
		my.clone();
	}
	catch(CloneNotSupportedException e) { ... }
	...
}

또는 다음과 같이 throws에 의해서 던져짐을 명시해야 컴파일이 된다.

public void simpleMethod(int n) throws CloneNotSupportedException
{
	MyClass my = new MyClass();
	my.clone();
	........
}

19. 처리하지 않아도 되는 (RuntimeException	)의 하위 클래스

Exception의 하위 클래스 중에는 (RuntimeException	)이라는 클래스가 존재한다. 그런데 이 클래스는 그 성격이 Error 클래스와 비슷하다(이는 Exception을 상속하는 다른 예외 클래스들과의 차이점이다). (RuntimeException	)을 상속하는 예외 클래스도 Error를 상속하는 예외 클래스와 마찬가지로 try~catch문, 또는 throws절을 이용한 예외처리를 필요로 하지 않는다. 하지만 다음과 같이 Error의 하위 클래스들과 구분되는 특징이 있다.

* (RuntimeException	)을 상속하는 예외 클래스는 Error를 상속하는 예외 클래스처럼 치명적인 상황을 표현하지 않는다.
* 따라서 예외발생 이휴에도 프로그램의 실행을 이어가기 위해서 try~catch 문으로 해당 예외를 처리하기도 한다.

20. 19번 클래스를 상속하는 클래스들은 무엇이 있는가?
* ArrayIndexOutOfBoundsException
* ClassCastException
* NegativeArraySizeException
* NullPointerException

예외의 성격이 보여주듯이 특별한 경우가 아니면, 이들에 대해서는 try~catch문을 이용해서 예외처리를 하지 않는다.