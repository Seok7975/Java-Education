<String>

* String -> char

(1) 000.String.charAt(x) : 000 문자열의 x번째 문자를 char형으로

(2) 000.toCharArray() : 000 문자열들을 char형으로 배열에 집어넣기 
	000.toCharArray()

* char[] -> String
String.valueOf()

* int -> String
String.valueOf(000) : 000 int형을 문자열형으로 	//만능이군

* String -> int
Integer.parseInt(000) : 000문자열을 int형으로 
#주의 : 숫자만 들어있는 문자열이어야함, 123[O], 12A[X]

* Stinrg 특정 문자의 맨처음 인덱스찾기
000.indexOf(xxx) : 000문자열에서 xxx의 맨처음 인덱스, 없다면 -1반환

000.indexOf(xxx, kkk) : 000문자열에서 xxx를 kkk인덱스부터 검색, 없다면 -1반환

* 000.contains(xx)) : xx이 000문자열에 존재하면 true, 아니면 false

* 000.substring(x) : 000문자열의 x인덱스부터
  000.substring(x, y) : 000문자열의 x인덱스<=	<y인덱스

* 000.trim()  : 000 문자열의 맨 앞,뒤 공백 제거

* 000.replace(a, b) : 000 문자열의 모든 a를 b로 대체 (공백, delete기능)

* 000.replaceFirst(a, b) : 000 문자열의 맨 앞에있는 a를 b로 대체

* 000.toCharArray() : 000문자열을 문자 하나씩 char[]형 배열화


-------------------------------------------------------------------------------------------
<Array>
* Arrays.fill(000, x); : 000배열에 x를 채워라

* System.arraycopy(옮기고싶은 배열, 어디부터?, 옮길 배열, 어디부터?, 옮기고싶은 배열의 어디까지? )

-------------------------------------------------------------------------------------------
<Math>
* 반올림
double num = 123.456
(1_1) 소수 첫째자리에서 반올림
	Math.round(num)
(1_2) 소수 첫째자리까지 반올림
	Math.round(num*10) / 10.0d

(2_1) String.format("%.nf", num) // n-1자리까지 반올림(n자리에서 반올림)

* x의 y제곱
Math.pow(x, y)

* x의 절댓값 
Math.abs(x)

* 최솟값 및 최댓값
Math.min(a, b ...)
Math.max(a, b ...)

------------------------------------------------------------------------------------------
<Token>

* System.currentTimeMillis()
컴퓨터의 현재시간을 기준으로, 1970년 1월1일 자정 이후로 지나온 시간을 
밀리 초(1/1000초) 단위로 계산해서 반환하는 메소드

* 매개변수 없는 난수 발생 생성자 방법
public Random()
{
	this(System.currentTimeMillis());	// 씨드 값을 전달받는 또 다른 생성자의 호출
}

새로운 객체가 생성될 때마다 현재 시간을 사용해 새로운 씨드 값 생성해 난수 생성.

* public String nextToken() : 토큰 반환할 때 쓰는 메소드

* public boolean hasMoreTokens() : 반환할 토큰이 남았는 지 확인하는 메소드


