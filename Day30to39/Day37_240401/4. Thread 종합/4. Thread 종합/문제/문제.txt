1. 프로그램의 실행요청은 컴퓨터 사용자에 의해 이뤄지지만, 실질적인 프로그램의 실행은 (	)에 의해서 이뤄진다.

2. 프로그램의 실행이 요청 되면, 다음의 형태로 메모리 공간이 할당된다.

프로세스에 할당된 메모리에 대해 서술하시오.

이렇듯 할당된 메모리 공간을 기반으로 실행 중에 있는 프로그램을 가리켜 	(  )라 한다.
따라서 (    )를 간단히 '실행중인 프로그램'으로 설명하기도 한다.


3. 하나의 프로세스에 둘 이상의 쓰레드를 실행시키자.
그리고 각각의 쓰레드 이름에 "멋진 쓰레드", 와 "예쁜 쓰레드"라는 이름을 주고 반복을 100번을 시키자

쓰레드의 우선순위를 가져오는 메소드? 
쓰레드의 우선순위를 설정하는 메소드? 
쓰레드의 우선순위를 설정할 때 쓰는 상수는? 

쓰레드의 라이프 사이클(Life Cycle)은?


4. class Sum 이 있고 여기에는 숫자를 저장할 수 있는 Instance 변수와 숫자를 더하는 메소드 숫자를 반환하는 메소드가 있다
class AddThread 라는 클래스를 쓰레드를 돌리기 위해서 인터페이스를 구현해서 두 개의 숫자 인스턴스 변수와
이 두개의 숫자 인스턴스 변수를 시작 값부터 끝 값까지 더하도록 메소드를 만들자. 그리고 AddThread 클래스는 Sum을 상속받도록 하자.
그리고 메인메소드에서 쓰레드를 두 개 생성해서 하나는 1부터 50까지 더하고 하나는 51부터 100까지 더해서 두 개의 쓰레드 실행결과 그 더한 값을 출력하도록 하자.

해당 쓰레드가 종료될 때까지 실행을 멈출 때 호출하는 메소드는? 


5. 문제23-1 [쓰레드 클래스의 정의와 쓰레드의 생성]
RunnableThread.java에서는 총 두 개의 쓰레드를 생성해서 각각 1부터 50까지, 그리고 51부터 100까지 덧셈을 진행하게 하고, 그 결과를 취해서 최종적으로 1부터 100까지의 덧셈결과를 출력하였다. 이번에는 이 예제를 Runnable 인터페이스를 구현하는 방식이 아닌, 쓰레드 클래스를 정의하는 방식으로 변경해보자.

동기화(Synchronization)
6. Increment라는 클래스는 num이라는 인스턴스 변수를  가지고 있고 그 클래스는 1씩 증가시키는 메소드와 숫자 값을 가져오는 메소드가 있다. IncThread라는 클래스는 Increment라는 클래스의 참조변수를 인스턴스변수로 가지고 있고 쓰레드를 실행시키면 중첩된 반복문으로 각각 10000 씩 Increment의 1씩 증가시키는 메소드를 호출한다.
그리고 main메소드가 있는 클래스에서 Increment 인스턴스한개 IncThread 3개를 만들고 3개의 쓰레드를 실행한 후에 Increment의 num의 값을 출력해본다.

7. 6번 문제는 동기화가 제대로 되지 않아 잘못된 값을 출력할 확률이 높다. 이 것을 동기화 시키는 두 가지 방법으로 동기화가 제대로 이루어 지도록 하자.

8. 문제 8 폴더에 있는 SyncObjectKey.java를 적절하게 Key를 사용하여 동기화해보자.(두 가지 방법)

9. 문자열이 있는 신문 클래스
신문작가(쓰레드)는 신문을 쓰고
독자(쓰레드)는 신문을 읽는다.

독자 실행.
작가 실행.

10. 쓰레드를 기다리게 하는 메소드의 원형
11. 하나의 쓰레드만 깨우는 메소드의 원형
12. 모든 쓰레드를 깨우는 메소드의 원형
13. 9번문제를 동기화가 가능한 상태로 수정하자.(독자 두명 생성. 실행)

14. 문제 23-2[쓰레드의 동기화]
main 메소드에서는 프로그램 사용자로부터 총 다섯 개의 정수를 입력 받아서 별도로 생성된 하나의 쓰레드에게 전달하고, 별도로 생성된 쓰레드는 전달받은 수의 총 합을 계산해서, 그 결과를 출력하는 프로그램을 작성해 보자. 이는 main 메소드를 실행하는 main 쓰레드와 main 쓰레드로부터 전달받은 수의 총 합을 계산하는 별도의 쓰레드간 동기화에 관련된 문제이다.

15. 문제15 폴더에 있는 소스를 ReentrantLock을 이용하여 수정하시오.

16. ReentrantLock 인스턴스를 대상으로 newCondition이라는 이름의 메소드를 호출하면, Condition형 인스턴스가 반환된다(정확히는 Condition 인터페이스를 구현하는 인스턴스의 참조 값이 반환된다). 그리고 반환된 인스턴스를 대상으로 다음의 메소드를 호출할 수 있다.
* awit		낮잠을 취한다.(wait 메소드에 대응)
* signal	낮잠 자는 쓰레드 하나를 깨운다(notify 메소드에 대응)
* signalAll	낮잠 자는 모든 스레드를 깨운다(notifyAll 메소드에 대응)

이 메소드들 역시 한번에 하나의 메소드만 호출될 수 있도록 동기화 처리가 되어야 한다. 단 반드시 앞서보인 ReentrantLock 인스턴스 기반으로 동기화 처리가 되어야 한다(synchronized 기반이 아닌).

문제. 예제를 통해서 Condition 인스턴스 기반의 실행순서 동기화의 사례를 보여라. 이 예제에서는 두 개의 쓰레드가 생성되는데, 하나는 프로그램 사용자로부터 문자열을 입력 받는 쓰레드이고, 다른 하나는 입력 받은 문자열을 출력하는 쓰레드이다.