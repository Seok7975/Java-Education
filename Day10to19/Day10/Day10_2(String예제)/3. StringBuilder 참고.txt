* String은 변경이 불가능한 문자열의 표현을 위한 클래스이지만, StringBuilder와 StringBuffer는 변경이 가능한 문자열의 표현을 위한 클래스들이다. 단 String 인스턴스와 달리 StringBuilder와 StringBuffer의 인스턴스를 가리켜 문자열이라 하지는 않는다.
StringBuilder는 문자열의 저장 및 변경을 위한 메모리 공간(이를 가리켜 '버퍼'라 한다)을 내부에 지니는데, 이 메모리 공간은 그 크기가 자동으로 조절된다는 특징이 있다.

StringBuilder의 특징 
StringBuilder는 버퍼의 크기를 스스로 확장한다.
@ public StringBuilder()	// 16개의 문자 저장 버퍼 생성
@ public StringBuilder(int capacity)	// capacity개의 문자 저장 버퍼 생성
@ public StringBuilder(String str)	// str.length() + 16개의 문자 저장 버퍼 생성

* StringBuilder의 효율적인 사용을 위한 지침
버퍼의 크기를 확장하는 작업은 많은 연산이 요구되는 작업이다. 따라서 가급적이면 필요로 하는 버퍼의 크기를 미리 할당하는 것이 성능에 도움이 된다.

StringBuilder과 StringBuffer의 차이점은?

StringBuffer 클래스와 StringBuilder 클래스가 제공하는 메소드들은 다음 세가지가 동일하다.
@ 메소드의 수(생성자 포함)
@ 메소드의 기능
@ 메소드의 이름과 매개변수 형

그리고 이 둘의 차이점은 "StringBuffer는 쓰레드에 안전하지만, StringBuilder는 쓰레드에 안전하지 못하다."

StringBuffer 클래스가 제공되기 시작한 시점과 StringBuilder가 제공되기 시작한 시점을 API 문서에서 찾아보자.
StringBuffer		since 1.5
StringBuilder		since JDK 1.0

StringBuilder는 문자열의 저장 및 변경을 위한 메모리 공간(이를 가리켜 '버퍼'라 한다)을 내부에 지니는데, 이 메모리 공간은 그 크기가 자동으로 조절된다는 특징이 있다.