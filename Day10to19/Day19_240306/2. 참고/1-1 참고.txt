public class 새
{
	public void  울다()
	{
	}
	public void 날다()
	{
	}
}

public class 참새 extends 새
{
	public void 울다()
	{
		System.out.println("짹짹");
	}
	public void 날다()
	{
		System.out.println("낮게 날다.");
	}
}

//////////////////////////////////////////////////////////////////

public abstract class 새
{
	public void  울다()
	{
	}
	public void 날다()
	{
	}
}

public class 참새 extends 새
{
	public void 울다()
	{
		System.out.println("짹짹");
	}
	public void 날다()
	{
		System.out.println("낮게 날다.");
	}
}

class MainClasss
{
	public static void main(String[] args)
	{
		새 새1 = new 새();		// abstract 클래스 객체 생성 불가
	}
}

////////////////////////////////////////////////////////////////////////////

public abstract class 새
{
	public abstract void 울다();	
	// abstract 메소드가 단 한 개만이라도 있으면
	// 그 클래스는 반드시 abstract으로 선언해야 한다.
	public abstract void 날다();
}

public class 참새 extends 새
{
	public void 울다()
	{
		System.out.println("짹짹");
	}
	public void 날다()
	{
		System.out.println("낮게 날다.");
	}
}
/*
	abstract 메소드가 있는 클래스를 상속하는 클래스는 반드시 
	몸통이 있는 형태의 완전한 메소드로 메소드 오버라이딩을 하거나
	그 클래스를 abstract 클래스로 선언해야 한다.
*/

/////////////////////////////////////////////////////////////////////////////////

public interface 새
{
	void 울다();	
	// public abstract void 울다();
	// public void 울다();
	// abstract void 울다();
	void 날다();
}
/*
	interface 안에 선언되는 모든 메소드는 public abstract으로 선언된다.
*/

public class 참새 implements 새
{
	public void 울다()
	{
		System.out.println("짹짹");
	}
	public void 날다()
	{
		System.out.println("낮게 날다.");
	}
}

/*
	interface를 구현하는(implemets) 클래스는 반드시 
	몸통이 있는 형태의 완전한 메소드로 메소드 오버라이딩을
	하거나 그 클래스를 abstract 클래스로 선언해야 한다.
*/
