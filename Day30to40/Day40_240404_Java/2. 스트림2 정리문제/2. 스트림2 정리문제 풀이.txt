1. 11, 22, 33, 44을 요소로 갖는 스트림을 생성하고 그 각요소를 출력하자.
"So Simple"이라는 요소로 갖는 스트림을 생성하고 그 각요소를 출력하자.
"Toy", "Robot", "Box"를 요소로 갖고 있는 리스트를 요소로 갖는 스트림을 생성하고 그 각요소를 출력하자.

import java.util.List;
import java.util.Arrays;
import java.util.stream.Stream;

class StreamOfStream {
    public static void main(String[] args) {
        // ex 1
        Stream.of(11, 22, 33, 44)
            .forEach(n -> System.out.print(n + "\t"));
        System.out.println();

        // ex 2
        Stream.of("So Simple")
            .forEach(s -> System.out.print(s + "\t"));
        System.out.println();

        // ex 3
        List<String> sl = Arrays.asList("Toy", "Robot", "Box");
        Stream.of(sl)
            .forEach(w -> System.out.print(w + "\t"));
        System.out.println();       
    }
}

2. 다음을 IntStream을 이용하여 코딩하시오.
7, 5, 3을 인자로 전달해서 스트림으로
숫자 5 부터 8 이전까지 스트림으로
숫자 5 부터 8 까지 스트림으로
그리고 각각의 스트림의 요소를 출력하시오.

import java.util.stream.IntStream;

class CreateIntStream {
    public static void showIntStream(IntStream is) {
        is.forEach(n -> System.out.print(n + "\t"));
        System.out.println();
    }

    public static void main(String[] args) {
        // 인자로 전달하는 값을 스트림으로
        IntStream is3 = IntStream.of(7, 5, 3); 
        showIntStream(is3);

        // 숫자 5 부터 8 이전까지 스트림으로
        IntStream is4 = IntStream.range(5, 8); 
        showIntStream(is4);

        // 숫자 5 부터 8 까지 스트림으로
        IntStream is5 = IntStream.rangeClosed(5, 8); 
        showIntStream(is5);
     }
}

3. 다음 문자열을 요소로 가지는 스트림을 생성해서, 가장 긴 문자열을 구해서 출력하자.
병렬스트림을 이용하자.
"Box", "Simple", "Complex", "Robot"

import java.util.List;
import java.util.Arrays;
import java.util.stream.Stream;
import java.util.function.BinaryOperator;

class ToParallelStream {
    public static void main(String[] args) {
        List<String> ls = Arrays.asList("Box", "Simple", "Complex", "Robot");
        Stream<String> ss = ls.stream();
        
        BinaryOperator<String> lc = 
            (s1, s2) -> { 
               if(s1.length() > s2.length())
                   return s1;
               else 
                   return s2;                   
            };
        
        String str = ss.parallel()
                      .reduce("", lc);
      
        System.out.println(str);
    }
}

4. "Cake", "Milk"를 요소로 하는 스트림을 생성한다.
"Lemon", "Jelly"를 요소로 하는 스트림을 생성한다.
유소를 하나로 묶은 후에 각 요소를 출력한다.

import java.util.stream.Stream;

class ConcateStringStream {
    public static void main(String[] args) {
        Stream<String> ss1 = Stream.of("Cake", "Milk");
        Stream<String> ss2 = Stream.of("Lemon", "Jelly");
        
        // 스트림을 하나로 묶은 후 출력
        Stream.concat(ss1, ss2).forEach(s -> System.out.println(s));
     }
}

5. 다음 문자열을 요소로 가지는 스트림을 만들고, 그것을 "_"를 기준으로 문자열을 분리하여 스트림을 만든후 모든 요소를 출력하자.

import java.util.Arrays;
import java.util.stream.Stream;

class FlatMapStream {
    public static void main(String[] args) {
        Stream<String> ss1 = Stream.of("MY_AGE", "YOUR_LIFE");

        Stream<String> ss2 = ss1.flatMap(s -> Arrays.stream(s.split("_")));
        ss2.forEach(s -> System.out.print(s + "\t"));

        System.out.println();
     }
}

6. 다음 소스코드의 ReportCard 배열을 스트림으로 만들어 평균을 출력하자.

import java.util.Arrays;
import java.util.stream.IntStream;

class ReportCard {
    private int kor;    // 국어 점수
    private int eng;    // 영어 점수
    private int math;    // 수학 점수
    
    public ReportCard(int k, int e, int m) {
        kor = k;
        eng = e;
        math = m;    
    }
    public int getKor() { return kor; }
    public int getEng() { return eng; }
    public int getMath() { return math; }
}


class GradeAverage2 {
    public static void main(String[] args) {
        ReportCard[] cards = {
            new ReportCard(70, 80, 90),
            new ReportCard(90, 80, 70),
            new ReportCard(80, 80, 80)
        };       

     }
}

////////////////////////////////////////////////////////////////////////////////////////////

import java.util.Arrays;
import java.util.stream.IntStream;

class ReportCard {
    private int kor;    // 국어 점수
    private int eng;    // 영어 점수
    private int math;    // 수학 점수
    
    public ReportCard(int k, int e, int m) {
        kor = k;
        eng = e;
        math = m;    
    }
    public int getKor() { return kor; }
    public int getEng() { return eng; }
    public int getMath() { return math; }
}


class GradeAverage2 {
    public static void main(String[] args) {
        ReportCard[] cards = {
            new ReportCard(70, 80, 90),
            new ReportCard(90, 80, 70),
            new ReportCard(80, 80, 80)
        };       

        Arrays.stream(cards)
           .flatMapToInt(r -> IntStream.of(r.getKor(), r.getEng(), r.getMath()))
           .average()
           .ifPresent(avg -> System.out.println("avg. " + avg));
     }
}

7. 다음 문자열을 요소로 가지고 있는 스트림을 생성하고, 알파벳 순으로 정렬한 후, 전체요소를 출력하자.
"Box", "Apple", "Robot"
다음 문자열을 요소로 가지고 있는 스트림을 생성하고, 문자열의 길이순으로 정렬한 후, 전체요소를 출력하자.
"Box", "Apple", "Rabbit"

import java.util.stream.Stream;

class InstSortedStream {
    public static void main(String[] args) {
        Stream.of("Box", "Apple", "Robot")
            .sorted()
            .forEach(s -> System.out.print(s + '\t'));
        System.out.println();
        
        Stream.of("Box", "Apple", "Rabbit")
            .sorted((s1, s2) -> s1.length() - s2.length())
            .forEach(s -> System.out.print(s + '\t'));
        System.out.println();
    }
}

8. 다음 정수를 요소로 갖고 있는 스트림을 생성하고, 정렬한 후, 모든 요소를 출력하자.
3, 9, 4, 2
다음 실수를 요소로 갖고 있는 스트림을 생성하고, 정렬한 후, 모든 요소를 출력하자.
3.3, 6.2, 1.5, 8.3

import java.util.stream.IntStream;
import java.util.stream.DoubleStream;

class PrimitiveSortedStream {
    public static void main(String[] args) {
        IntStream.of(3, 9, 4, 2)
            .sorted()
            .forEach(d -> System.out.print(d + "\t"));
        System.out.println();

        DoubleStream.of(3.3, 6.2, 1.5, 8.3)
            .sorted()
            .forEach(d -> System.out.print(d + "\t"));
        System.out.println();
    }
}

9. 다음 소스코드의 실행 결과를 서술하고, 그 이유에 대해서 설명하시오.

import java.util.stream.IntStream;

class LazyOpStream {
    public static void main(String[] args) {
        // 최종 연산이 생략된 스트림의 파이프라인
        IntStream.of(1, 3, 5)
            .peek(d -> System.out.print(d + "\t"));
        System.out.println();

  
        // 최종 연산이 존재하는 스트림의 파이프라인
        IntStream.of(5, 3, 1)
            .peek(d -> System.out.print(d + "\t"))
            .sum();            
        System.out.println();
    }
}

실행결과

5	3	1

다음 스트림의 파이프라인에는(연산들에는) 최종 연산이 존재하지 않는다. 따라서 중간 연산은 진행되지 않는다.

IntStream.of(1, 3, 5)
		.peek(d->System.out.print(d + "\t"));
		
반면 다음 파이프라인에는 최종 연산이 존재한다. 이 최종 연산 sum은 스트림에 저장된 값을 모두 더하여 그
결과를 반환한다.

IntStream.of(5, 3, 1)
	.peek(d -> Systetm.out.print(d + "\t"))
	.sum();
	
그런데 위의 문장에서 sum이 반환하는 값을 저장하거나 출력하지 않는다. 따라서 sum은 프로그램의
실행 결과에 아무런 영향을 주지 않는다. 그럼에도 불구하고 이 연산으로 인해 파이프라인에 데이터가
흐른다. 따라서 중간 연산이 실행된다.

10. 1, 3, 5, 7, 9로 스트림을 만들고 합, 개수, 평균, 최소, 최대를 구하시오.

import java.util.stream.IntStream;

class OpIntStream {
    public static void main(String[] args) {
        // 합
        int sum = IntStream.of(1, 3, 5, 7, 9)
                          .sum();
        System.out.println("sum = " + sum);

        // 개수
        long cnt = IntStream.of(1, 3, 5, 7, 9)
                          .count();
        System.out.println("count = " + cnt);

        // 평균
        IntStream.of(1, 3, 5, 7, 9)
                .average()
                .ifPresent(av -> System.out.println("avg = " + av));

        // 최소
        IntStream.of(1, 3, 5, 7, 9)
                .min()
                .ifPresent(mn -> System.out.println("min = " + mn));

        // 최대
        IntStream.of(1, 3, 5, 7, 9)
                .max()
                .ifPresent(mx -> System.out.println("max = " + mx));
 
    }
}

11. 다음 소스코드의 출력결과를 적으시오.

import java.util.stream.IntStream;

class MatchStream {
    public static void main(String[] args) {
        boolean b = IntStream.of(1, 2, 3, 4, 5)
                          .allMatch(n -> n%2 == 0);
        System.out.println("모두 짝수이다. " + b);

        b = IntStream.of(1, 2, 3, 4, 5)
                    .anyMatch(n -> n%2 == 0);
        System.out.println("짝수가 하나는 있다. " + b);

        b = IntStream.of(1, 2, 3, 4, 5)
                    .noneMatch(n -> n%2 == 0);
        System.out.println("짝수가 하나도 없다. " + b);
    }
}

//모두 짝수이다. false
//짝수가 하나는 있다. true
//짝수가 하나도 없다. false

12. 스트림을 이용하여 다음 내용이 출력되도록 소스코드를 완성하자.

import java.util.Arrays;
import java.util.stream.Stream;
import java.util.stream.DoubleStream;

class ReportCard {
    private int kor;    // 국어 점수
    private int eng;    // 영어 점수
    private int math;    // 수학 점수
    
    public ReportCard(int k, int e, int m) {
        kor = k;
        eng = e;
        math = m;    
    }
    public int getKor() { return kor; }
    public int getEng() { return eng; }
    public int getMath() { return math; }
}


class GradeAverage90 {
    public static void main(String[] args) {
        ReportCard[] cards = {
            new ReportCard(98, 84, 90),
            new ReportCard(92, 87, 95),
            new ReportCard(85, 99, 93)
        };       


    }
}

//평균 90 이상이 한 명 이상 존재합니다. true
//모두 평균 90 이상입니다. true

/////////////////////////////////////////////////////////////////////////

import java.util.Arrays;
import java.util.stream.Stream;
import java.util.stream.DoubleStream;

class ReportCard {
    private int kor;    // 국어 점수
    private int eng;    // 영어 점수
    private int math;    // 수학 점수
    
    public ReportCard(int k, int e, int m) {
        kor = k;
        eng = e;
        math = m;    
    }
    public int getKor() { return kor; }
    public int getEng() { return eng; }
    public int getMath() { return math; }
}


class GradeAverage90 {
    public static void main(String[] args) {
        ReportCard[] cards = {
            new ReportCard(98, 84, 90),
            new ReportCard(92, 87, 95),
            new ReportCard(85, 99, 93)
        };       

        boolean b1 = Arrays.stream(cards)
              .mapToDouble(
                  r -> (r.getKor() + r.getEng() + r.getMath()) / 3.0)
              .anyMatch(avg -> avg >= 90.0);
        System.out.println("평균 90 이상이 한 명 이상 존재합니다. " + b1);

        if(b1 == true) {
            boolean b2 = Arrays.stream(cards)
                 .mapToDouble(
                     r -> (r.getKor() + r.getEng() + r.getMath()) / 3.0)
                 .allMatch(avg -> avg >= 90.0);
            System.out.println("모두 평균 90 이상입니다. " + b2);
        }
    }
}

13. 다음 문자열을 스트림을 이용하여 길이가 5미만인 요소들로 이루어진 ArrayList로 만들자.
"Hello", "Box", "Robot", "Toy"

import java.util.List;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.stream.Stream;

class CollectStringStream {
    public static void main(String[] args) {
        String[] words = {"Hello", "Box", "Robot", "Toy"};
        Stream<String> ss = Arrays.stream(words);
        
        List<String> ls = ss.filter(s -> s.length() < 5)
                          .collect(
                              () -> new ArrayList<>(),
                              (c, s) -> c.add(s),
                              (lst1, lst2) -> lst1.addAll(lst2));
    
        System.out.println(ls);
    }
}

14. 13번 문제를 병렬스트림으로 처리하는 부분을 추가하자.

import java.util.List;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.stream.Stream;

class CollectParallelStringStream {
    public static void main(String[] args) {
        String[] words = {"Hello", "Box", "Robot", "Toy"};
        Stream<String> ss = Arrays.stream(words);
        
        List<String> ls = ss.parallel()
                          .filter(s -> s.length() < 5)                          
                          .collect(
                              () -> new ArrayList<>(),
                              (c, s) -> c.add(s),
                              (lst1, lst2) -> lst1.addAll(lst2));
    
        System.out.println(ls);
    }
}