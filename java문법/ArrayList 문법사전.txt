<ArrayList>

1. 특징

* 연속적인 데이터의 리스트(데이터는 연속적으로 리스트에 들어있어야 하며 중간에 빈공간이 있으면 X)
* ArrayList 클래스는 내부적으로 Object[] 배열을 이용하여 요소를 저장
* 배열을 이용하기 때문에 인덱스를 이용해 요소에 빠르게 접근 가능 => 조회를 많이 하는 경우에 사용
* 크기가 고정되어있는 배열과 달리 데이터 적재량에 따라 가변적으로 공간 늘리고 줄이기 가능
* 배열 공간이 꽉 찰 때마다 배열을 copy하는 방식으로 늘리므로 이 과정에서 지연 발생
* 데이터를 리스트 중간에 삽입/삭제 할 경우, 중간에 빈 공간이 생기지 않도록 요소들의 위치를 앞뒤로 자동으로 이동시킴
  따라서 삽입/삭제 동작은 느림

2. Arrays vs ArrayLists

* 처음 선언한 배열의 크기(길이)는 변경 불가=정적 할당(static allocation) 
	vs 리스트의 길이가 가변적=동적 할당(dynamic allocation)
* 데이터 크기가 정해져 있을 경우 메모리 관리 편함
	크기를 변경할 수 없기 때문에, 너무 큰 크기는 메모리 낭비, 너무 작은 크기는 공간 부족하는 경우 발생 할 수 있음
	vs 객체로 데이터를 다루기 때문에 적은양의 데이터만 쓸 경우 배열에 비해 차지하는 메모리가 커짐
* 메모리에 연속적으로 나열되어 할당하기 때문에 index를 통한 색인(접근) 속도가 빠름
	vs 배열과 달리 메모리에 연속적으로 나열되어있지 않고 주소로 연결되어있는 형태
	    따라서 index를 통한 색인(접근)속도가 배열보다는 느림
* index에 위치한 하나의 데이터(element)를 삭제하더라도 해당 index에서는 빈공간으로 계속 남음
 	[10, 20, 30, null, 50]
	vs 데이터(element) 사이에 빈 공간을 허용하지 않음 [10, 20, 30, 50]


3. ArrayList 객체 생성

import java.util.ArrayList;

* ArrayList()
 크기가 10인 ArrayList를 생성


* ArrayList(Collection c)
 주어진 컬렉션이 저장된 ArrayList를 생성


* ArrayList(int initialCapacity)
 지정된 초기용량을 갖는 ArrayList를 생성

------------------------------------------------------------------------------------------------------------------------
ex)

// 타입설정 Integer 객체만 적재가능
ArrayList<Integer> members = new ArrayList<>();

// 초기 용량(capacity)지정
ArrayList<Integer> num3 = new ArrayList<>(10);

// 배열을 넣어 생성
ArrayList<Integer> list2 = new ArrayList<>(Arrays.asList(1,2,3));

// 다른 컬렉션으로부터 그대로 요소를 받아와 생성 (ArrayList를 인자로 받는 API를 사용하기 위해서 Collection 타입 변환이 필요할 때 많이 사용)
ArrayList<Integer> list3 = new ArrayList<>(list2);
-------------------------------------------------------------------------------------------------------------------------

4. ArrayList 요소 추가

ArrayList에 요소를 추가할때 제네릭 타입 파라미터로 명시된 타입의 데이터만 추가가 가능

* capacity : 리스트의 공간 용량
* size : 리스트 안에 들어잇는 요소들의 총 갯수


ArrayList<String> list = new ArrayList<>(10);

* boolean list.add(Object obj)
ArrayList의 마지막에 객체를 추가한다. 추가에 성공하면 true를 반환

* list.add()
ArrayList의 마지막에 객체를 추가

* list.add(n, x)
0인덱스 자리에 x 삽입

*list1.addAll(lise2)
list1에 list2의 내용을 추가


5. ArrayList 요소 삭제

* list.remove(n)
n번째 인덱스 자리의 요소 삭제

* boolean :  list.remove(Object obj)
지정된 객체를 제거한다 성공하면 true

* boolean : list.removeAll(Collection c)
지정한 컬렉션에 저장된 것과 동일한 객체들을 ArrayList에서 제거한다.

* boolean :  list.retainAll(Collection c)
ArrayList에 저장된 객체 중에서 주어진 컬렉션과 공통된 것들만 남기고 제거한다.(removeAll 반대 버전)

* list.clear()
list의 데이터를 모두 비운다.


6. ArrayList 요소 검색

* boolean : list.isEmpty()
ArrayList가 비어있는지 확인한다.

* boolean : list.contains(Object obj)
지정된 객체(obj)가 ArrayList에 포함되어 있는지 확인한다.

* int : list.indexOf(Object obj)
지정된 객체(obj)가 저장된 위치를 찾아 반환한다.

* int : list.lastIndexOf(Object obj)
지정된 객체(obj)가 저장된 위치를 뒤에서부터 역방향으로 찾아 반환한다


7. ArrayList 요소 얻기

* Object : list.get(in index)
저장된 위치(index)에 저장된 객체를 반환한다.

* List : list.subList(int fromIndex, int toIndex) (fromIndex<  <toIndex)
fromIndex부터 toIndex사이에 저장된 객체를 반환한다.

8. ArrayList 요소 변경

*Object : list.set(int index, Object obj)
주어진 객체(obj)를 지정한 위치(index)에 저장한다.
자리에 있던 기존의 데이터는 삭제되고 새로운 데이터가 대체되어 들어간다.
(배열의 replace)


9. ArrayList 용량 확장

* int : list.size()
ArrayList에 저장된 객체의 개수를 반환
배열의 length, 문자열의 length()

* void : list.ensureCapacity(int minCapacity)
ArrayList의 용량이 최소한 minCapacity가 되도록 한다.

ex)
ArrayList<String> list = new ArrayList<>(5); 

list.add("1");
list.add("2");
list.add("3");
list.add("4");
list.add("5");

list.ensureCapacity(10); // 최소 용량이 5에서 10으로 재지정

list.add("6");
list.add("7");

System.out.println(list); // [1, 2, 3, 4, 5, 6, 7]

* void : list.trimToSize()
용량의 크기에 맞게 줄인다(빈 공간을 없앤다.)



10. ArrayList 복사

* Object : list.clone()
ArrayList를 복제한다.

ex)
ArrayList<Integer> number = new ArrayList<>();
number.add(1);
number.add(3);
number.add(5);

// ArrayList는 내부적으로 Object[] 배열로 저장하기 때문에 형변환이 필요함
ArrayList<Integer> cloneNumber = (ArrayList<Integer>) number.clone();

System.out.println("ArrayList: " + number); // [1, 3, 5]
System.out.println("Cloned ArrayList: " + cloneNumber); // [1, 3, 5]


11. ArrayList 배열 변환

* Object[] : list.toArray()
ArrayList에 저장된 모든 객체들을 배열로 전환

* Object[] : list.toArray(Object[] objArr)
ArrayList에 저장된 모든 객체들을 배열 objArr에 담아 반환

ex)
ArrayList<String> languages= new ArrayList<>();
languages.add("Java");
languages.add("Python");
languages.add("C");

/* ArrayList<String> 을 String[] 배열로 변환 */

// 방법 1 : 배열로 변환하고 반환
String[] arr1 = languages.toArray();

// 방법 1 : 매개변수로 지정된 배열에 담아 바환
String[] arr2 = new String[languages.size()]; // 먼저 리스트 사이즈에 맞게 배열 생성
languages.toArray(arr2);


12. ArrayList 정렬
ArrayList를 정렬할때 주의할점은 sort() 메서드는 정렬된 값을 반환하는 것이 아닌, 원본 리스트 자체를 변경 시킨다.

* void : list.sort(Comparator c)
지정된 정렬기준(c)으로 ArrayList를 정렬

ex)
ArrayList list1 = new ArrayList();
list1.add("3");
list1.add("2");
list1.add("1");
 
// 오름차순 정렬
list1.sort(Comparator.naturalOrder());
System.out.println(list1); // [1, 2, 3]

// 내림차순 정렬
list1.sort(Comparator.reverseOrder());
System.out.println(list1); // [3, 2, 1]


13. ArrayList 순회
보통 ArrayList의 요소들을 순회할 일이 있다면 다음과 같이 for문으로 처리하는 것이 일반적일 것

ex)
ArrayList<Integer> list = new ArrayList<Integer>();
list.add(1);
list.add(2);
list.add(3);
list.add(4);

for(Integer i : list) 
{ 
    System.out.println(i);
}


// 참고
// https://inpa.tistory.com/entry/JAVA-%E2%98%95-ArrayList-%EA%B5%AC%EC%A1%B0-%EC%82%AC%EC%9A%A9%EB%B2%95