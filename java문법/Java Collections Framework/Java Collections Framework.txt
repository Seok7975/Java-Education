<Java Collections Framework(JCF)>
자료 구조(Data Structure) 종류의 형태들을 자바 클래스로 구현한 모음집
즉, 데이터를 저장하는 자료 구조와 데이터를 처리하는 알고리즘을 구조화하여 클래스로 구현해 놓은 것
* 컬렉션 프레임워크에 저장할 수 있는 데이터는 오로지 객체(Object) 뿐이다.
* int, double형 같은 primitive타입은 적재 불가
* 따라서 primitive 타입을 wrapper 타입으로 변환하여 Integer 객체나 Double 객체로 Boxing하여 저장해야함
* 또한 객체를 담는 다는 것은 곧 주소값을 담는다는 것이니 null도 저장이 가능
1. 장점
(1) 인터페이스와 다형성을 이용한 객체지향적 설계를 통해 표준화 되어있어, 사용법을 익히기에도 편리하고 재사용성 높음
(2) 데이터 구조 및 알고리증의 고성능 구현을 제공하여 프로그램의 성능과 품질을 향상시킨다.
(3) 관련 없는 API 간의 상호 운용성을 제공(상위 인터페이스 타입으로 업캐스팅하여 사용)
(4) 이미 구현되어있는 API를 사용하면 되기에 새로운 API를 익히고 설계하는 시간이 줄어든다.
(5) 소프트웨어 재사용을 촉진. 
    만일 자바에서 지원하지 않는 새로운 자료구조가 필요하다면, 
    컬렉션들을 재활용 및 집합해 새로운 알고리즘을 만들어낼 수 있음.

2_1. Iterable 인터페이스
	|  Iterable  |
	     ↑
	| Collection |
* 컬렉션 인터페이스들의 가장 최상위 인터페이스
* default void forEach(Consumer<? super T> action)
  함수형 프로그래밍 전용 루프 메서드
* Iterator<T> iterator()
  컬렉션에서 이터레이터를 구현
* default Spliterator<T> splierator()
  파이프라이닝 관련 메서드
* Tip
참고로 Map은 iterable 인터페이스를 상속받지 않기 때문에 iterator()와 spliterator()는 
Map 컬렉션에 구현이 되어 있지 않다. 따라서 직접적으로 Map 컬렉션을 순회할수는 없고 
스트림(Stream)을 사용하거나 간접적으로 키를 Collection으로 반환하여 
루프문으로 순회하는 식을 이용한다.

2_2. Collection 인터페이스
       |  Iterable  |
            ↑
      | Collection | 
  ↑        ↑        ↑
| List | | Queue |   | Set |
(1) 특징
* List, Queue, Set에 상속을 하는 실질적인 최상위 컬렉션 타입
* 즉, 업캐스팅으로 다양한 종류의 컬렉션 자료형을 받아 자료를 삽입하거나 삭제, 탐색 기능을 할 수 있다. (다형성)
* Collection 인터페이스의 메서드를 보면 요소(객체)에 대한 
추가, 삭제, 탐색은 다형성 기능으로 사용이 가능하지만, 데이터를 get 하는 메서드는 보이지 않는다. 
왜냐하면 각 컬렉션 자료형 마다 구현하는 자료 구조가 제각각 이기 때문에 
최상위 타입으로 조회하기 까다롭기 때문이다.

(2) 메서드
* boolean add(Object o) 
지정된 객체(o)를 Collection에 추가

* boolean addAll(Callection c) 
지정된 Collection(c)의 객체들을 Collection에 추가
* boolean contains(Object o) 
지정된 객체(o)가 Collection에 포함되어 있는지 확인

* boolean containsAll(Collection c) 
지정된 Collection(c)의 객체들이 Collection에 포함되어 있는지 확인

* boolean remove(Object o)
지정된 객체에 포함된 객체들을 삭제

* boolean removeAll(Collection c)
지정된 Collection(c)에 포함된 객체들을 삭제

* bollean retainAll(Collection c)
지정된 Collection에 포함된 객체만을 남기고 다른 객체들은 Collection에서 삭제.
사실상 removeAll의 대칭 버전. (교집합 동작)
이 작업으로 Collection에 변화가 있으면 true, 없으면 false를 반환

* void clear()
Collection의 모든 객체를 삭제

* boolean equals(Object o)
동일한 Collection인지 비교

* int hashCode()
Collection의 hash code를 반환

* boolean isEmpty()
Collection이 비어있는지 확인

* Iterator iterator()
Collection의 iterator를 얻어서 반환(상위 Iterable 인터페이스를 상속)

* int size()
Collection에 저장된 객체의 개수를 반환

* Object[] toArray()
Collection에 저장된 객체를 객체배열(Object[])로 반환

* Object[] toArray(Object[] a)
지정된 배열에 Collection의 객체를 저장해서 반환

2_3. List 인터페이스
| List | 	← | ArrayList | : 동기화 보장X
	← | LinkedList |
	← | Vector | : 동기화 보장
	← | Stack |
(1) 특징
* 저장 순서가 유지되는 컬렉션을 구현하는 데 사용
* 같은 요소의 중복 저장을 허용
* 배열과 마찬가지로 index로 요소에 접근
* 리스트와 배열의 가장 큰 차이는 리스트는 자료형 크기가 고정적이 아닌 데이터 양에 따라
  동적으로 늘어났다 줄어들 수 있다.(가변)
* 요소 사이에 빈공간을 허용하지 않아 삽입/삭제 할 때마다 배열 이동이 일어난다

(2) 메서드
* void add(int index, Object element)
  boolean addAll(int index, Collection c)
지정된 위치(index)에 객체(element) 또는 컬렉션에 포함된 객체들을 추가한다.

* Object remove(int index)
지정된 위치(index)에 있는 객체를 삭제하고 삭제된 객체를 반환한다.

* Object get(int index)
지정된 위치(index)에 있는 객체를 반환한다.

* Object set(int index, Object element)
지정된 위치(index)에 객체(element)를 저장한다.

* int indexOf(Object o)
지정된 객체의 위치(index)를 반환한다. (순방향)

* int lastIndexOf(Object o)
지정된 객체의 위치(index)를 반환한다. (역방향)

* List subList(int fromIndex, int toIndex)
지정된 범위(from ~ to)에 있는 객체를 반환한다.

* ListIterator listIterator()
  ListIterator listIterator(int index)
List의 객체에 접근할 수 있는 ListIterator를 반환한다.

* void sort(Comparator c)
지정된 비교자(comparator)로 List를 정렬한다.

2_3_1. ArrayList 클래스

(1) 특징
* 배열을 이용하여 만든 리스트
* 데이터의 저장순서가 유지되고 중복을 허용
* 데이터량에 따라 공간(capacity)가 자동으로 늘어나거나 줄어들음
* 단방향 포인터 구조로 자료에 대한 순차적인 접근에 강점이 있어 조회가 빠름
* 삽입/삭제가 느리다는 단점이 존재. 단, 순차적으로 삽입/삭제는 가장 빠름

2_3_2. LinkedList 클래스


(1) 특징
* 노드(객체)를 연결하여 리스트처럼 만든 컬렉션(배열이 아님)
* 데이터의 중간 삽입, 삭제가 빈번할 경우 빠른 성능을 보장
* 하지만 임의의 요소에 대한 접근 성능은 좋지 않음
* 자바의 LinkedList는 Doubly LinkedList(양방향 포인터 구조)로 이루어져 있다.
* LinkedList는 리스트 용도 이외에도 스택, 큐, 트리 등의 자료구조의 근간이 된다.
2_3_3. Vector 클래스

(1) 특징
* ArrayList의 구형 버전(내부 구성이 거의 비슷하다)
* ArrayList와의 차이는 모든 메서드가 동기화(synchronized) 되어있어 Thead-Safe하다는 점이다.
* 구버전 자바와 호환성을 위해 남겨두었으며 잘 쓰이진 않는다.
* 만일 현업에서 컬렉션에 동기화가 필요하면 Collections.synchronizedList() 메서드를 이용해 ArrayList를 동기화 처리하여 사용한다.


2_3_4. Stack 클래스

(1) 특징
* 후입 선출 LIFO(Last-In-First-Out) 자료구조
* 마지막에 들어온 원소가 처음으로 나간다
* 들어올 때는 push, 나갈 때는 pop이라는 용어를 사용
* Stack은 Vector를 상속하기 때문에 문제점이 많아 잘 안 쓰임(대신 ArrayDeque 사용)


 9. Queue 인터페이스
| Queue |  ← | Deqeue |	     	 ← | LinkedList |
				 ← | ArrayDeque |
	    
	  ← | PriorityQueue |

(1) 특징 
* 선입선출 FIFO(First-In-First-Out) 구조, 처음 들어온 원소가 가장 먼저 나감.
* 자바에서는 Queue는 인터페이스이고 필요에 따라 큐 컬렉션을 골라 사용할 수 있다

(2) 메서드
* boolean add(Object o)
지정된 객체를 Queue에 추가. 저장 공간 부족 시 IllegalStateException 발생

* Object remove()
Queue에서 객체를 꺼내 반환. 비어있을 경우 NoSuchElementException 발생
* Object element()
삭제없이 요소를 읽어온다. 비어있을 경우 NosuchElementException 발생

* boolean offer(Object o)
Queue에 객체를 저장

* Object poll()
Queue에서 객체를 꺼내서 반환. 비어있을 경우 null을 반환

* Object peek()
삭제없이 요소를 읽어온다. 비어있을 경우 null을 반환

//cf) 
https://inpa.tistory.com/entry/JCF-%F0%9F%A7%B1-Collections-Framework-%EC%A2%85%EB%A5%98-%EC%B4%9D%EC%A0%95%EB%A6%AC