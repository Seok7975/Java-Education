<Lambda>

1. 함수형 프로그래밍
  * 자료 처리를 수학적 함수의 계산으로 취급하고 상태와 가변 데이터를 멀리하는 프로그래밍
  * 함수형 프로그래밍 = 선언적 프로그래밍 (람다를 지원하기 전의 Java는 100% 명령형 프로그래밍)
     - 명령형 프로그래밍 : 클래스에서 메서드를 정의하고, 필요할 때 그 메서드를 호출하는 명령하여 동작.
     - 선언적 프로그래밍 : 데이터가 입력으로 주어지고, 데이터가 처리되는 과정(흐름)을 정의하는 것으로 동작.

  (1) 특징
      * 불변성
        상태를 변경하지 않는 것. 
`       상태를 변경하게 되면, 부수 효과가 생기게 되어 순수함수의 조건을 만족하지 못함.
        순수함수를 사용하는 함수형 프로그래밍은 불변성을 가짐.

      * 참조 투명성
        프로그램의 변경 없이도 어떤 표현식을 값으로 대체할 수 있다.

      * 일급 함수
         - 함수를 함수의 매개변수로 넘길 수 있다.
         - 함수를 함수의 반환값으로 돌려줄 수 있다.
         - 함수를 변수나 자료구조에 담을 수 있다.
         - 일급 함수를 포함하는 일급 시민(Frist-Class Citizen)
           ㆍ 대상을 함수의 매개변수로 넘길 수 있다.
           ㆍ 대상을 함수의 반환값으로 돌려줄 수 있다.
           ㆍ 대상을 변수나 자료구조에 담을 수 있다.

      * 게으른 평가
         - 함수형 언어가 아닌 언어의 코드는 실행 즉시 값을 평가한다.
         - 하지만 함수형 언어에서는 값이 필요한 시점에 평가한다
         cf) 참고로, 람다식을 사용한 스트림에서, 종단연산이 있지 않으면 없는 연산과 같은 이유가 된다.


2. 람다식
  * 람다식은 메서드를 하나의 식으로 표현하는 선언적 프로그래밍의 방법
     (원래의 자바는 익명 클래스를 이용하여 익명 구현 객체를 사용할 수 있었다.)
  * 함수형 프로그래밍을 도입하면서 간단하게 표현할 수 있는 방법 (람다식 ≠ 익명 내부 클래스)

  (1) 특징
      * 익명
         - 보통의 메서드와 달리 이름이 없다.
      * 함수
         - 보통의 메서드와 달리 메서드가 아닌 함수
         - 메서드는 클래스에 종속적인 것을 메서드라 하지만, 함수는 어느곳에도 종속적이지 않다.
      * 일급 시민
         - 매개변수의 인자가 될 수 있고, 반환값이 될 수 있고, 자료구조에 담길 수 있다.

  (2) 람다식 사용법
      * 좌항을 파라미터로, 우항의 람다 몸체를 실행

	기본                  					  : (int num) -> {System.out.println(num);} 
		
	단일 실행문은 중괄호 제거  				  : (int num) -> System.out.println(num);
	
	단일 인자는 타입 생략     				  : (num) -> System.out.println(num);

	단일 인자는 소괄호 제거				  : num -> System.out.println(num);

	인자가 없으면 소괄호 필수    			  : () -> System.out.println("매개변수 없음"); 

	인자가 여러개면 소괄호 필수 			  : (x, y) -> System.out.println(x, y);

	인자가 없고 반환값이 있으면  		   	  : () -> {return value;};

	실행코드가 return문 뿐이면 return 키워드 생략 가능 	  : () -> value;

	매개변수, 리턴타입 둘다 있으면 			  : (x, y) -> x+y;


3. 함수형 인터페이스
   앞서 말했듯이 함수형 프로그래밍의 람다는 일급 함수로 매개변수, 리턴값, 자료구조의 일부가 될 수 있다 하였다.
   그럼 이 때, 람다의 타입은 무엇일까?(람다라는 함수객체는 어떤 타입의 구현체일까?)
   람다가 있어야 할 곳이 어딘가?   => 정답은 '함수형 인터페이스'

   (1) 함수형 인터페이스
        * 특징
           - 추상 메서드가 단 하나여야 한다.
             ㆍ 추상 메서드가 하나여야 람다식에서 정보를 추론할 수 있다.
             ㆍ 추상 메서드는 하나지만, 도움이 되는 static이나 default메서드들은 여러개 가질 수 있다.
           - @FunctionallInterface로 검증할 수 있다.
           - 제네릭 <T>를 타입 파라미터로 가진다.
           - 인터페이스에 정의된 하나의 추상 메서드는 이후 함수형 인터페이스의 구현체인 람다함수를 실행시킬 메서드

   (2) 함수형 인터페이스의 종류 
        java.util.function 에는 자바의 빌트인 함수형 인터페이스가 40여개가 있다.
        우리는 앵간하면 제공하는 함수형 인터페이스를 이용하여 프로그래밍할 수 있으며, 필요한 경우 구현해서 쓸 수 있다.

        인터페이스명 : Runnable
        추상 메서드   : void run()
        설명 	 : 기본적인 인터페이스, 매개변수와 반환값 없음


        인터페이스명 : Supplier<T>
        추상 메서드   : T get()
        설명 	 : 매개변수 없음, 제네릭타입 반환값 가짐


        인터페이스명 : Consumer<T>
        추상 메서드   : void accept()
        설명	 : 제네릭 매개변수 하나, 반환값 없음(void)


        인터페이스명 : Predicate<T>
        추상 메서드   : boolean test()
        설명 	 : 제네릭 매개변수 하나, Boolean 반환값 하나


        인터페이스명 : Function<T,R>
        추상 메서드   : R apply(T t)
        설명 	 : 제네릭 매개변수 하나와 다른 제네릭 반환값하나


        인터페이스명 : Comparator<T>
        추상 메서드   : int compare(T o1, T o2)
        설명 	 : 같은 제네릭 타입 매개변수 두개를 받고, Integer 반환값 하나 가짐, 
		   객체간 비교를 위한, compare를 위한 인터페이스


        인터페이스명 : BiConsumer<T,U>
        추상 메서드   : void accept(T t, U u)
        설명 	 : 서로다른 제네릭 매개변수 두개를 받고 반환값 없음


        인터페이스명 : BiFunction<T,U,R>
        추상 메서드   : R apply(T t, U u)
        설명 	 : 서로 다른 제네릭 매개변수 두개를 받고 다른 제네릭 타입의 반환값 하나


        인터페이스명 : BiPridicate<T,U>
        추상 메서드   : boolean test(T t, U u)
        설명 	 : 서로 다른 제네릭 타입의 매개변수 2개를 받고Boolean 타입의 반환값 하나 가짐

        java.util.function 에는 각 Supplier, Consumer, Predicate, Function 기본 함수형 인터페이스에 대해 
        파생적인 인터페이스들로 구성되어 있다.예를 들면, IntConsumer 는 원시타입인 int 를 받도록 되어 있는데, 
        이를 사용하면 불필요한 박싱으로 인한 객체생성을 하지 않아서 훨씬 효율적이다.

추가는 사이트 참고

//https://alkhwa-113.tistory.com/entry/%EB%9E%8C%EB%8B%A4%EC%8B%9Dfeat-%EC%9D%B5%EB%AA%85-%EA%B5%AC%ED%98%84-%ED%81%B4%EB%9E%98%EC%8A%A4-vs-%EB%9E%8C%EB%8B%A4%EC%8B%9D