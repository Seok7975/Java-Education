0. 다음 소스코드의 Product 배열을 Vector를 이용하는 형태로 바꾸시오.
환불하는 메소드 refund도 추가하자.

class Product {
	int price;			// 제품의 가격
	int bonusPoint;		// 제품구매 시 제공하는 보너스점수

	Product(int price) {
		this.price = price;
		bonusPoint =(int)(price/10.0);
	}

	Product() {} // 기본 생성자
}
 
class Tv extends Product {
	Tv() {
		super(100);	
	}

	public String toString() { return "Tv"; }
}

class Computer extends Product {
	Computer() { super(200); }

	public String toString() { return "Computer"; }
}

class Audio extends Product {
	Audio() { super(50); }

	public String toString() { return "Audio"; }
}

class Buyer {			// 고객, 물건을 사는 사람
	int money = 1000;	// 소유금액
	int bonusPoint = 0;	// 보너스점수
	Product[] item = new Product[10];	// 구입한 제품을 저장하기 위한 배열
	int i =0;			// Product배열에 사용될 카운터

	void buy(Product p) {
		if(money < p.price) {
			System.out.println("잔액이 부족하여 물건을 살수 없습니다.");
			return;
		}

		money -= p.price;	        // 가진 돈에서 구입한 제품의 가격을 뺀다.
		bonusPoint += p.bonusPoint;	// 제품의 보너스 점수를 추가한다.
		item[i++] = p;		        // 제품을 Product[] item에 저장한다.
		System.out.println(p + "을/를 구입하셨습니다.");
	}

	void summary() {		    // 구매한 물품에 대한 정보를 요약해서 보여 준다.
		int sum = 0;		 	// 구입한 물품의 가격합계
		String itemList =""; 	// 구입한 물품목록

		// 반복문을 이용해서 구입한 물품의 총 가격과 목록을 만든다.
		for(int i=0; i<item.length;i++) {
			if(item[i]==null) break;
			sum += item[i].price;
			itemList += item[i] + ", ";
		}
		System.out.println("구입하신 물품의 총금액은 " + sum + "만원입니다.");
		System.out.println("구입하신 제품은 " + itemList + "입니다.");
	}
}

class PolyArgumentTest2 {
	public static void main(String args[]) {
		Buyer b = new Buyer();

		b.buy(new Tv());
		b.buy(new Computer());
		b.buy(new Audio());
		b.summary();
	}
}

1. 메인메소드가 있는 클래스를 만들고, 거기서 객체 복사를 해보자.

public class Person{
	private String name;
	private int age;
	public Person(String name, int age) {
		this.name = name;
		this.age = age;
	}
	
	public void show() {
		System.out.println(name + " " + age);		
	}
}

다음 만드는 방법을 이클립스 단축키를 이용하여 적으시오.

2. 새로운 자바 프로젝트 만들기
3. Friend 클래스 만들기
4. 글자 크기 키우기
5. 글자 크기 작게 하기
6. 실행 단축키
7. System.out.println 단축키
8. 전체 선택 단축키
9. 들여쓰기, 내어쓰기를 적절하게 해주는 단축키
10. 현재 라인을 밑에 복사하는 단축키
11. Generate Constructor using Fields 단축키
12. Override/implement Methods 단축키
13. Generate Getters and Setters ... 단축키
14. 현재라인을 위로 이동하는 단축키
15. 한줄 주석 단축키
16. 여러줄 주석 단축키
16. 여러줄 주석 푸는 단축키
17. 클래스 계층도 보여주는 단축키
18. try catch 자동완성 하는 법은?
19. 멀티 컬럼 편집 단축키
20. 실행취소 단축키
21. 다시 실행 단축키
22. 전체 단축키 목록 보기 단축키
23. 선언된 곳으로 가는 단축키

